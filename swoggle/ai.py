# AUTOGENERATED! DO NOT EDIT! File to edit: dev/01_ai.ipynb (unless otherwise specified).

__all__ = ['Swoggle', 'RandomAgent']

# Cell
from .core import *
class Swoggle:
    """ The game itself"""

    def __init__(self, agents=[], setup='basic'):
        self.board = Board()
        self.board.reset()
        self.agents = agents

        # Set up basic layout
        # Add two players (with bases) and a central drone
        self.board.board[0][0].player = 1
        self.board.board[0][0].base = 1
        self.board.board[7][0].player = 2
        self.board.board[7][0].base = 2
        self.board.board[7][7].player = 3
        self.board.board[7][7].base = 3
        self.board.board[0][7].player = 4
        self.board.board[0][7].base = 4
        self.board.board[3][2].drone = True
        self.board.board[5][3].drone = True
        self.board.board[4][5].drone = True
        self.board.board[2][4].drone = True

    def dice(self):
        return random.choice([1, 2, 3, 4, 5, 6])

    def move(self, player, start_loc, end_loc, dice_roll, drone=False, powerjump=False):
        """ Moves a player not under internal agent control the does the agent's moves """
        self.board.move(player, start_loc, end_loc, dice_roll, drone=False, powerjump=False)
        for a in self.agents:
            a.move(self.board, self.dice())

    def move_agents(self):
        for a in self.agents:
            a.move(self.board, self.dice())

    def show(self):
        self.board.show()

    def interactive_play(self):
        pass
        # TODO

# Cell
import random
class RandomAgent:
    """ Given a swoggle board on which it is a player, make a random valid move """

    def __init__(self, player):
        self.player = player

    def move(self, board, dice_roll):

        # If in jail, try to escape
        if self.player in board.jail:
            board.move(self.player, (0, 0), (0, 0), dice_roll, False, False)
            return 'escape'

        # Get start_loc
        start_loc = (9, 9)
        for row in board.board:
            for cell in row:
                if cell.player == self.player:
                    start_loc = (cell.y, cell.x)
        if start_loc == (9, 9):
            return None

        # Make a random move within reach
        move = ()
        count = 0
        while True:
            count += 1
            end_x = random.choice(range(8))
            end_y = random.choice(range(8))
            drone = random.choice([True, False])
            powerjump = random.choice([True, False])
            valid = board.is_valid_move(self.player, start_loc, (end_x, end_y), dice_roll, drone=drone, powerjump=powerjump)
            move = ()
            if valid:
                move = ((self.player, start_loc, (end_x, end_y), dice_roll, drone, powerjump))
                print(f'{self.player} took {count} tries to guess a random move')
                break
        board.move(*move)
        return move
