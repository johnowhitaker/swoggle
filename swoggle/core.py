# AUTOGENERATED! DO NOT EDIT! File to edit: dev/00_core.ipynb (unless otherwise specified).

__all__ = ['Cell', 'Board', 'Swoggle']

# Cell
class Cell:
    """ Represent a cell on the game board """
    x, y = 0, 0
    drone = False
    player = None
    base = None

    def __init__(self, x, y, drone=False, player=None, base=None):
        self.x = x
        self.y = y
        self.drone = drone
        self.player = player
        self.base = base

# Cell
import math

class Board:

    board = [[Cell(x, y) for x in range(8)] for y in range(8)]
    jail = []

    def __init__(self, verbose=True):
        self.verbose=verbose
        self.board = [[Cell(x, y) for x in range(8)] for y in range(8)]
        self.jail = []

    def reset(self):
        self.board = [[Cell(x, y) for x in range(8)] for y in range(8)]
        self.jail = []

    def is_valid_move(self, player, start_loc, end_loc, dice_roll, drone, powerjump):
        xs, ys, xe, ye = *start_loc, *end_loc

        # Check it's in bounds
        if max(xs, ys, xe, ye) > 7 or min(xs, ys, xe, ye) < 0:
            return False

        # Check that player is in start loc
        if self.board[xs][ys].player != player:
            return False

        # Check that there's a drone in the start loc if drone
        if drone and not self.board[xs][ys].drone:
            return False

        #Check they're starting from their base if powerjump
        if powerjump and not self.board[xs][ys].base == player:
            return False

        # Adjust max distance if drone or powerjump
        if drone or powerjump:
            dice_roll = math.ceil(dice_roll/2)

        # Check we're in range
        if abs(xe-xs) > dice_roll:
            return False
        if abs(ye-ys) > dice_roll:
            return False

        # Check the base isn't defended against an un-armoured attacker
        if self.board[xe][ye].base != None:
            if self.board[xe][ye].player and drone==False: # Defended
                return False

        # Check if dest is droned player
        if (self.board[xe][ye].player != None) and (self.board[xe][ye].drone) and not (drone or powerjump):
            return False

        # If you rolled a 1, you have to move 1 (no camping in the same place)
        if dice_roll == 1:
            if (xs == xe) and (ys == ye):
                return False


        # Maaaaaybe see if there are drones in the way?

        return True

    def move(self, player, start_loc, end_loc, dice_roll, drone=False, powerjump=False):

        # If in jail, try to escape (5 or 6)
        if player in self.jail:
            if dice_roll > 4:
                self.jail.remove(player)
                # Put player back on base:
                for row in self.board:
                    for cell in row:
                        if cell.base == player:
                            cell.player = player
                if self.verbose: print('Player', player, 'escaped')
                # End turn
                return True
            else:
                if self.verbose: print('Player', player, 'did not escape')
                return True

        # Check move validity
        if not self.is_valid_move(player, start_loc, end_loc, dice_roll, drone, powerjump):
            if self.verbose: print('Invalid Move', player, start_loc, end_loc)
            return False

        xs, ys, xe, ye = *start_loc, *end_loc

        # Check for player clashes
        if self.board[xe][ye].player != None and self.board[xe][ye].player != player: # Valid move so we capture them
            pid = self.board[xe][ye].player
            if self.verbose: print('Player', pid, 'sent to Swoggle Spa')
            # Clear jailed player
            for row in self.board:
                for cell in row:
                    if cell.player == pid:
                        cell.player = None
            self.jail.append(pid)

        # Move player
        self.board[xs][ys].player = None
        self.board[xe][ye].player = player

        # Optional - should powerjumping to a droned player destroy the drone? Comment for no
        if powerjump:
            if self.board[xe][ye].drone:
                if self.verbose: print('Drone destroyed')
            self.board[xe][ye].drone = False

        # Move drone
        if drone:
            if not self.board[xe][ye].drone: # If there's a drone there already, leave ours behind
                self.board[xs][ys].drone = False
            self.board[xe][ye].drone = True

        # Check for base defeats
        if self.board[xe][ye].base != None and self.board[xe][ye].base != player: # If move is valid, we defeated the base
            # Player goes to own base, base and player of defeated charachter disappear
            pid = self.board[xe][ye].base
            if self.verbose: print("Player", str(player), "defeated player", pid)
            self.board[xe][ye].base = None
            self.board[xe][ye].player = None
            for row in self.board:
                for cell in row:
                    # Clear defeated charachetr
                    if cell.player == pid:
                        cell.player = None
                    # Return attacking player
                    if cell.base == player:
                        cell.player = player
            if pid in self.jail:
                self.jail.remove(pid) # If they were in jail, remove them


        if self.verbose: print('Moved', player, start_loc, end_loc)
        return True

    def show(self):
        for row in self.board:
            s = ''
            for cell in row:
                s += '['
                if cell.player != None:
                    s += str(cell.player)
                else:
                    s += '.'
                if cell.drone:
                    s += 'd'
                else:
                    s += '.'
                if cell.base != None:
                    s += str(cell.base)
                else:
                    s += '.'
                s += ']'
            print(s)
        print('Spa:', self.jail)

# Cell
import random
class Swoggle:
    """ The game itself"""

    def __init__(self, agents=[], setup='basic', verbose=True):
        self.board = Board(verbose=verbose)
        self.board.reset()
        self.agents = agents

        # Set up basic layout
        self.board.board[0][0].player = 1
        self.board.board[0][0].base = 1
        self.board.board[7][0].player = 2
        self.board.board[7][0].base = 2
        self.board.board[7][7].player = 3
        self.board.board[7][7].base = 3
        self.board.board[0][7].player = 4
        self.board.board[0][7].base = 4
        self.board.board[3][2].drone = True
        self.board.board[5][3].drone = True
        self.board.board[4][5].drone = True
        self.board.board[2][4].drone = True

    def dice(self):
        return random.choice([1, 2, 3, 4, 5, 6])

    def move(self, player, start_loc, end_loc, dice_roll, drone=False, powerjump=False):
        """ Moves a player not under internal agent control the does the agent's moves """
        self.board.move(player, start_loc, end_loc, dice_roll, drone=drone, powerjump=powerjump)
        for a in self.agents:
            a.move(self.board, self.dice())

    def move_agents(self):
        for a in self.agents:
            a.move(self.board, self.dice())

    def show(self):
        self.board.show()

    def interactive_play(self):
        pass
        # TODO