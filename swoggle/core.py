# AUTOGENERATED! DO NOT EDIT! File to edit: dev/00_core.ipynb (unless otherwise specified).

__all__ = ['Cell', 'dice', 'Board']

# Cell

class Cell:
    """ Represent a cell on the game board """
    x, y = 0, 0
    drone = False
    player = None
    base = None

    def __init__(self, x, y, drone=False, player=None, base=None):
        self.x = x
        self.y = y
        self.drone = drone
        self.player = player
        self.base = base

    def is_occupied(self):
        if self.player != None:
            return True
        return False

    def is_free(self):
        if (self.player == None) and (self.base == None) and not (self.drone):
            return True
        return False

# Cell
def dice():
    return 6

# Cell
import math

class Board:

    board = [[Cell(x, y) for x in range(8)] for y in range(8)]
    jail = []

    def is_valid_move(self, player, start_loc, end_loc, dice_roll, drone):
        xs, ys, xe, ye = *start_loc, *end_loc

        # Check it's in bounds
        if max(xs, ys, xe, ye) > 7 or min(xs, ys, xe, ye) < 0:
            return False

        # Check that player is in start loc
        if self.board[xs][ys].player != player:
            print(2)
            return False

        # Check that there's a drone in the start loc if drone
        if drone and not self.board[xs][ys].drone:
            return False

        # Adjust max distance if drone
        if drone:
            dice_roll = math.ceil(dice_roll/2)

        # Check we're in range
        if abs(xe-xs) > dice_roll:
            return False
        if abs(ye-ys) > dice_roll:
            return False

        # Check the base isn't defended against an un-armoured attacker
        if self.board[xe][ye].base != None:
            if self.board[xe][ye].player and drone==False: # Defended
                return False



        # Check if dest is droned player
        if (self.board[xe][ye].player != None) and (self.board[xe][ye].drone) and not drone:
            return False


        # Maaaaaybe see if there are drones in the way?

        return True

    def move(self, player, start_loc, end_loc, dice_roll, drone=False):
        if not self.is_valid_move(player, start_loc, end_loc, dice_roll, drone):
            print('Invalid Move', player, start_loc, end_loc)
            return False

        xs, ys, xe, ye = *start_loc, *end_loc

        # Check for player clashes
        if self.board[xe][ye].player != None: # Valid move so we capture them
            self.board[xe][ye].player = None
            # TODO ADD TO JAIL

        # Move player
        self.board[xs][ys].player = None
        self.board[xe][ye].player = player

        # Move drone
        if drone:
            if not self.board[xe][ye].drone: # If there's a drone there already, leave ours behind
                self.board[xs][ys].drone = False
            self.board[xe][ye].drone = True

        # Check for base defeats
        if self.board[xe][ye].base != None: # If move is valid, we defeated the base
            # Player goes to own base, base and player of defeated charachter disappear
            pid = self.board[xe][ye].base
            print("Player", str(player), "defeated player", pid)
            self.board[xe][ye].base = None
            self.board[xe][ye].player = None
            for row in self.board:
                for cell in row:
                    # Clear defeated charachetr
                    if cell.player == pid:
                        cell.player = None
                    # Return attacking player
                    if cell.base == player:
                        cell.player = player




        # Add power jump

        # Add jail check

        print('Moved', player, start_loc, end_loc)

    def show(self):
        for row in self.board:
            s = ''
            for cell in row:
                s += '['
                if cell.player != None:
                    s += str(cell.player)
                else:
                    s += '.'
                if cell.drone:
                    s += 'd'
                else:
                    s += '.'
                if cell.base != None:
                    s += str(cell.base)
                else:
                    s += '.'
                s += ']'
            print(s)